spring:
  datasource:
    # local environment
#    url: jdbc:mysql://localhost:3306/spring_social?useSSL=false&serverTimezone=UTC
#    username: root
#    password: #mypassword for local mysql
#    # docker environment
    url: jdbc:mysql://db:3306/spring_social?createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true&useSSL=false
    username: springsocial
    password: # password for docker password

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: create
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL5InnoDBDialect
  security:
    oauth2:
      client:
        registration:
          google:
            clientId: ## google api client
            clientSecret: ## google api key
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile
app:
  auth:
    tokenSecret: ## secret token
    tokenExpirationMsec: 864000000
  cors:
    allowedOrigins: http://localhost:3000,http://localhost:8080
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect